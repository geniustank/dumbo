// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// generator typegraphql {
//   provider = "typegraphql-prisma"
//   output   = "../generated/type-graphql"
// }

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum ConnectionType {
  DISCORD
  GOOGLE
  GITHUB
  SPOTIFY
  EMAIL
  FACEBOOK
  NUMBER
  TWITTER
  INSTAGRAM
  LINKEDIN
  STACKOVERFLOW
}

enum Chain {
  SOLANA
  EVM
}

enum Role {
  Controller
  Admin
  Assertion
  Authentication
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  address String @unique // main address, contoller, will still have it as a linkedWallet
  did     String @unique

  avatar     String?
  bio        String?
  name       String?
  username   String  @unique
  websiteUrl String?

  socialConnections      UserConnectionData[]
  OtpData                OtpVerification?
  VerifiableCredential   VerifiableCredential[]
  linkedWallets          LinkedWallet[]
  pendingWalletApprovals PendingWalletApproval[]
}

model PendingWalletApproval {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  nonce   Int

  alreadySigned PendingWalletApprovalWallet
  toBeSigned    PendingWalletApprovalWallet

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

type PendingWalletApprovalWallet {
  address   String 
  chain     Chain
  role      Role
  signature String?
}
      
model LinkedWallet {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  address   String @unique
  chain     Chain
  role      Role
  signature String
  nonce     Int

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

type OtpVerification {
  createdAt    DateTime @default(now())
  lastIssuedAt DateTime
  hash         String   @default("User has been verified")
  expiresAt    DateTime
  isVerified   Boolean  @default(false)
}

type UserConnectionData {
  username      String
  userid        String         @default(uuid())
  discriminator String
  verifiedAt    DateTime       @default(now())
  type          ConnectionType
}

model VerifiableCredential {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  issuer       String
  subject      String
  uri          String
  hash         String
  claim        Json
  proof        Json
  issuedAt     DateTime
  expiresAt    DateTime
  credentialId String
  type         ConnectionType?

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  @@unique([userId, credentialId], name: "user_credential_id")
}