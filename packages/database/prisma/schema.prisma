// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// generator typegraphql {
//   provider = "typegraphql-prisma"
//   output   = "../generated/type-graphql"
// }

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Sector {
ROBOTICS
AI_ML
BEAUTY_PRODUCTS
FOOD
HARDWARE
HEALTHCARE
EDUCATION
COMPUTER_SCIENCE
WEB3
MISC
NONE
}


model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  avatar     String?
  googleId        String?
  name       String?
  email      String  @unique
  company    Company?
}

model Company {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String
  discription String 
  primarySector Sector
  secondarySector Sector
  index Int
  funds Funds
  shares Shares
  Fluctuation StockFluctuation? 
  Query Query[]
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId @unique
}

type Funds {
  rawValue Int
  value String
  allocatedAt DateTime @default(now())
}

type Shares {
 rawValue Int
 value String
 allocatedAt DateTime @default(now())
}

model StockFluctuation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  increasePercentage Int
  decreasePercentage Int

  company   Company   @relation(fields: [companyId], references: [id])
  companyId String @db.ObjectId @unique
}

model Query {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  verifiedAt DateTime @updatedAt
  question String
  isAnswered Boolean @default(false)
  accurasy Int @default(0)
  company   Company   @relation(fields: [companyId], references: [id])
  companyId String @db.ObjectId @unique
}


      
// model LinkedWallet {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   address   String @unique
//   chain     Chain
//   role      Role
//   signature String
//   nonce     Int

//   user   User   @relation(fields: [userId], references: [id])
//   userId String @db.ObjectId
// }



// model VerifiableCredential {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   issuer       String
//   subject      String
//   uri          String
//   hash         String
//   claim        Json
//   proof        Json
//   issuedAt     DateTime
//   expiresAt    DateTime
//   credentialId String
//   type         ConnectionType?

//   user   User   @relation(fields: [userId], references: [id])
//   userId String @db.ObjectId

//   @@unique([userId, credentialId], name: "user_credential_id")
// }